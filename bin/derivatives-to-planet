#!/usr/bin/python

# Copyright 2011 Paul Wise
# Released under the MIT/Expat license, see doc/COPYING

# Creates a configuration file and logo heads for Planet Debian derivatives
# based on the logos and RSS feeds for the blogs of all the derivatives. The
# resulting configuration file and heads must be manually merged with the
# Planet Debian derivatives configuration and heads by someone who checks the
# feeds and then commits the valid data to the Planet Debian SVN repository.
# Planet Debian derivatives and more information on Planet Debian is here:
#
# http://planet.debian.org/deriv/
# http://wiki.debian.org/PlanetDebian
#
# Usage:
# derivatives-to-planet <list of derivatives> <planet config> <heads dir>

import os
import sys
try: import Image
except: pass

default_size = (100,100)

try: os.makedirs(sys.argv[3])
except OSError: pass

df = open(sys.argv[1])
f = open(sys.argv[2], 'w')
for d in df:
	d = d.strip()
	if not d: continue
	name = open(os.path.join(d,'name')).read().strip()
	src = os.path.abspath(os.path.join(d,'logo-img'))
	if os.path.exists(src):
		dst = os.path.abspath(os.path.join(sys.argv[3],d))
		try: os.remove(dst)
		except: pass
		try:
			img = Image.open(src)
			img.thumbnail(default_size,Image.ANTIALIAS)
			img.save(dst, 'PNG')
			img_size = img.size
		except:
			os.symlink(os.path.relpath(src,sys.argv[3]),dst)
			img = src
			img_size = None
	else:
		img = None
		img_size = None
	try:
		rf = open(os.path.join(d,'blogs-rss'))
		for rss in rf:
			if not rss.strip(): continue
			f.write("[%s]\n" % rss.strip())
			f.write("name = %s\n" % name)
			if img is not None:
				f.write("face = deriv/%s\n" % d)
			if img_size is not None:
				f.write("facewidth = %s\n" % img_size[0])
				f.write("faceheight = %s\n" % img_size[1])
			f.write("\n")
		rf.close()
	except:
		pass
	try:
		rf = open(os.path.join(d,'blogs-dev-rss'))
		for rss in rf:
			if not rss.strip(): continue
			f.write("[%s]\n" % rss.strip())
			f.write("name = %s developers\n" % name)
			if img is not None:
				f.write("face = deriv/%s\n" % d)
			if img_size is not None:
				f.write("facewidth = %s\n" % img_size[0])
				f.write("faceheight = %s\n" % img_size[1])
			f.write("\n")
		rf.close()
	except:
		pass
f.close()
df.close()
